import { BaseManager } from './index.js';
import { Inhibitor } from '../structures/index.js';
import { Collection } from 'discord.js';
import type { ShewenyClient } from '../client/Client.js';
import type { InhibitorsManagerOptions, InhibitorsManagerDefaultOptions } from '../typescript/index.js';
/**
 * Manager for Inhibitors
 */
export declare class InhibitorsManager extends BaseManager {
    /**
     * Default data for the inhibitors
     * @type {InhibitorsManagerDefaultOptions}
     */
    default: InhibitorsManagerDefaultOptions;
    /**
     * Collection of the inhibitors
     * @type {Collection<string, Inhibitor[]> | undefined}
     */
    inhibitors?: Collection<string, Inhibitor[]>;
    /**
     * Constructor to manage inhibitors
     * @param {ShewenyClient} [client] Client framework
     * @param {boolean} [options] The options of the manager
     */
    constructor(client: ShewenyClient, options: InhibitorsManagerOptions);
    /**
     * Load all inhibitors in collection
     * @returns {Promise<Collection<string, Inhibitor[]> | undefined>}
     */
    loadAll(): Promise<Collection<string, Inhibitor[]> | undefined>;
    /**
     * Unload all inhibitors
     * @returns {void}
     */
    unloadAll(): void;
}
