{"version":3,"file":"interactionModalSubmitCreate.js","sourceRoot":"","sources":["../../src/events/interactionModalSubmitCreate.ts"],"names":[],"mappings":"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","sourcesContent":["import { ShewenyError } from '../helpers/index.js';\nimport { INHIBITOR_TYPE, MODAL_EVENTS } from '../constants/constants.js';\nimport { Collection, ModalSubmitInteraction } from 'discord.js';\nimport type { ShewenyClient } from '../client/Client.js';\nimport type { Inhibitor, Modal } from '../structures/index.js';\n\nexport default async function run(client: ShewenyClient, interaction: ModalSubmitInteraction) {\n  try {\n    if (!client.collections.modals) return;\n\n    const modals: Modal[] = [];\n    for (const [, structure] of client.collections.modals) {\n      if (!structure || (structure && !structure.length)) return;\n      for (const modal of structure) {\n        for (const customId of modal.customId) {\n          if (!(customId instanceof RegExp) && customId === interaction.customId) {\n            modals.push(modal);\n          } else if (customId instanceof RegExp && customId.test(interaction.customId)) {\n            customId.lastIndex = 0;\n            modals.push(modal);\n          }\n        }\n      }\n    }\n\n    if (!modals || (modals && !modals.length)) return;\n    for (const modal of modals) {\n      await (async () => {\n        if (!modal.enabled) return;\n        if (modal.before) await modal.before(interaction);\n\n        /**\n         * Handle inhibitors\n         */\n        const inhibitorsCollection = client.collections.inhibitors?.filter((is: Inhibitor[]) => {\n          for (const i of is) {\n            return i.type.includes(INHIBITOR_TYPE.modal) || i.type.includes(INHIBITOR_TYPE.all);\n          }\n          return false;\n        });\n        const inhibitorsArray: Inhibitor[] = [];\n        for (const [, inhibitors] of inhibitorsCollection) {\n          if (inhibitors && inhibitors.length) {\n            for (const inhibitor of inhibitors) {\n              inhibitorsArray.push(inhibitor);\n            }\n          }\n        }\n        if (inhibitorsArray && inhibitorsArray.length) {\n          const sorted = inhibitorsArray.sort((a, b) => b.priority - a.priority);\n          for (const i of sorted) {\n            if (!(await i.execute(modal, interaction))) return await i.onFailure(modal, interaction);\n          }\n        }\n\n        /* ---------------COOLDOWNS--------------- */\n        if (!client.admins?.includes(interaction.user.id)) {\n          if (!client.cooldowns.buttons.has(modal.customId)) {\n            client.cooldowns.buttons.set(modal.customId, new Collection<string, number>());\n          }\n\n          const timeNow = Date.now();\n          const tStamps = client.cooldowns.buttons.get(modal.customId);\n          const cdAmount = (modal.cooldown || 0) * 1000;\n\n          if (tStamps) {\n            if (tStamps.has(interaction.user.id)) {\n              const cdExpirationTime = (tStamps.get(interaction.user.id) || 0) + cdAmount;\n              if (timeNow < cdExpirationTime) {\n                // const timeLeft = (cdExpirationTime - timeNow) / 1000;\n                return client.managers.buttons?.emit(MODAL_EVENTS.cooldownLimit, interaction, cdExpirationTime - timeNow);\n              }\n            }\n\n            tStamps.set(interaction.user.id, timeNow);\n            setTimeout(() => tStamps.delete(interaction.user.id), cdAmount);\n          }\n        }\n        await modal.execute(interaction);\n      })();\n    }\n  } catch (err) {\n    const e = err as Error;\n    new ShewenyError(client, e);\n  }\n}\n"]}