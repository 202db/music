{"version":3,"file":"ModalsManager.js","sourceRoot":"","sources":["../../src/managers/ModalsManager.ts"],"names":[],"mappings":";;;AAAA,kDAA4C;AAC5C,kDAAyD;AACzD,yCAAyC;AACzC,qDAA+C;AAC/C,2CAAwC;AAGxC;;GAEG;AACH,MAAa,aAAc,SAAQ,sBAAW;IAa5C;;;;OAIG;IACH,YAAY,MAAqB,EAAE,OAA6B;QAC9D,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAlBzB;;;WAGG;QACH;;;;;WAA6C;QAE7C;;;WAGG;QACH;;;;;WAA8C;QAS5C,IAAI,CAAC,OAAO,GAAG;YACb,QAAQ,EAAE,OAAO,CAAC,OAAO,EAAE,QAAQ,IAAI,CAAC;SACzC,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,OAAO;QAClB,MAAM,MAAM,GAAG,IAAI,kBAAM,CAA8B,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE;YAC9F,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,gBAAK;YACf,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,6BAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,qBAAqB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QAC7E,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,IAAI,CAAC,MAAM,GAAG,IAAI,uBAAU,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACzC,CAAC;CACF;AAhDD,sCAgDC","sourcesContent":["import { Loader } from '../utils/Loader.js';\nimport { ShewenyInformation } from '../helpers/index.js';\nimport { BaseManager } from './index.js';\nimport { Modal } from '../structures/index.js';\nimport { Collection } from 'discord.js';\nimport type { ShewenyClient } from '../client/Client.js';\nimport type { CustomId, ModalsManagerDefaultOptions, ModalsManagerOptions } from '../typescript/index.js';\n/**\n * Manager for Modals\n */\nexport class ModalsManager extends BaseManager {\n  /**\n   * Default data for the buttons\n   * @type {ModalsManagerDefaultOptions}\n   */\n  public default?: ModalsManagerDefaultOptions;\n\n  /**\n   * Collection of modals\n   * @type {Collection<CustomId, Modal> | undefined}\n   */\n  public modals?: Collection<CustomId, Modal[]>;\n\n  /**\n   * Constructor to manage modals\n   * @param {ShewenyClient} [client] Client framework\n   * @param {boolean} [options] The options of the manager\n   */\n  constructor(client: ShewenyClient, options: ModalsManagerOptions) {\n    super(client, options);\n    this.default = {\n      cooldown: options.default?.cooldown || 0,\n    };\n  }\n\n  /**\n   * Load all modals in collection\n   * @returns {Promise<Collection<CustomId, Modal> | undefined>}\n   */\n  public async loadAll(): Promise<Collection<CustomId, Modal[]> | undefined> {\n    const loader = new Loader<'customId', CustomId, Modal>(this.client, this.directory, 'customId', {\n      manager: this,\n      instance: Modal,\n      asyncRead: this.asyncRead,\n    });\n    this.modals = await loader.load();\n    new ShewenyInformation(this.client, `- Modals loaded : ${this.modals.size}`);\n    return this.modals;\n  }\n\n  /**\n   * Unload all modals\n   * @returns {void}\n   */\n  public unloadAll(): void {\n    this.modals = new Collection();\n    this.client.collections.modals.clear();\n  }\n}\n"]}