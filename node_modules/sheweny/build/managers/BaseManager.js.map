{"version":3,"file":"BaseManager.js","sourceRoot":"","sources":["../../src/managers/BaseManager.ts"],"names":[],"mappings":";;;AAAA,mCAAsC;AAKtC,MAAsB,WAAY,SAAQ,qBAAY;IAwBpD;;;;OAIG;IACH,YAAY,MAAqB,EAAE,OAA2B;QAC5D,KAAK,EAAE,CAAC;QA7BV;;;WAGG;QACH;;;;;WAAmC;QACnC;;;WAGG;QACH;;;;;WAAsC;QAEtC;;;WAGG;QACH;;;;;WAAkC;QAehC,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,SAAS,CAAC,0BAA0B,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC;YAAE,MAAM,IAAI,SAAS,CAAC,6BAA6B,CAAC,CAAC;QAErG,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,KAAK,CAAC;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;IACrC,CAAC;CACF;AAtCD,kCAsCC","sourcesContent":["import { EventEmitter } from 'events';\nimport type { Collection } from 'discord.js';\nimport type { ShewenyClient } from '../client/Client.js';\nimport type { BaseManagerOptions } from '../typescript/index.js';\n\nexport abstract class BaseManager extends EventEmitter {\n  /**\n   * Directory to load\n   * @type {boolean}\n   */\n  public readonly asyncRead: boolean;\n  /**\n   * Client framework\n   * @type {ShewenyClient}\n   */\n  public readonly client: ShewenyClient;\n\n  /**\n   * Directory to load\n   * @type {string}\n   */\n  public readonly directory: string;\n\n  /**\n   * Load all structures in collection\n   * @returns {Promise<Collection<K, V[]> | undefined>}\n   */\n  public abstract loadAll(): Promise<Collection<unknown, unknown[]> | undefined>;\n\n  /**\n   * Constructor of BaseManager class (extends EventEmitter)\n   * @param {ShewenyClient} [client]\n   * @param {BaseManagerOptions} [options]\n   */\n  constructor(client: ShewenyClient, options: BaseManagerOptions) {\n    super();\n    if (!client) throw new TypeError('Client must be provided.');\n    if (!options || (options && !options?.directory)) throw new TypeError('Directory must be provided.');\n\n    this.asyncRead = options.asyncRead ?? false;\n    this.client = client;\n    this.directory = options.directory;\n  }\n}\n"]}