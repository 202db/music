{"version":3,"file":"ButtonsManager.js","sourceRoot":"","sources":["../../src/managers/ButtonsManager.ts"],"names":[],"mappings":";;;AAAA,kDAA4C;AAC5C,kDAAyD;AACzD,yCAAyC;AACzC,qDAAgD;AAChD,2CAAwC;AAGxC;;GAEG;AACH,MAAa,cAAe,SAAQ,sBAAW;IAa7C;;;;OAIG;IACH,YAAY,MAAqB,EAAE,OAA8B;QAC/D,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAlBzB;;;WAGG;QACH;;;;;WAAgD;QAEhD;;;WAGG;QACH;;;;;WAA8C;QAS5C,IAAI,CAAC,OAAO,GAAG;YACb,QAAQ,EAAE,OAAO,CAAC,OAAO,EAAE,QAAQ,IAAI,CAAC;SACzC,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,OAAO;QAClB,MAAM,MAAM,GAAG,IAAI,kBAAM,CAA+B,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE;YAC/F,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,iBAAM;SACjB,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACnC,IAAI,6BAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,sBAAsB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QAC/E,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,IAAI,CAAC,OAAO,GAAG,IAAI,uBAAU,EAAE,CAAC;QAChC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IAC1C,CAAC;CACF;AAhDD,wCAgDC","sourcesContent":["import { Loader } from '../utils/Loader.js';\nimport { ShewenyInformation } from '../helpers/index.js';\nimport { BaseManager } from './index.js';\nimport { Button } from '../structures/index.js';\nimport { Collection } from 'discord.js';\nimport type { ShewenyClient } from '../client/Client.js';\nimport type { ButtonsManagerDefaultOptions, ButtonsManagerOptions, CustomId } from '../typescript/index.js';\n/**\n * Manager for Buttons\n */\nexport class ButtonsManager extends BaseManager {\n  /**\n   * Collection of the buttons\n   * @type {Collection<CustomId, Button[]> | undefined}\n   */\n  public buttons?: Collection<CustomId, Button[]>;\n\n  /**\n   * Default data for the buttons\n   * @type {ButtonsManagerDefaultOptions}\n   */\n  public default?: ButtonsManagerDefaultOptions;\n\n  /**\n   * Constructor of buttons manager\n   * @param {ShewenyClient} client Client framework\n   * @param {ButtonsManagerOptions} options The options of the manager\n   */\n  constructor(client: ShewenyClient, options: ButtonsManagerOptions) {\n    super(client, options);\n    this.default = {\n      cooldown: options.default?.cooldown || 0,\n    };\n  }\n\n  /**\n   * Load all buttons in collection\n   * @returns {Promise<Collection<CustomId, Button[]> | undefined> }\n   */\n  public async loadAll(): Promise<Collection<CustomId, Button[]> | undefined> {\n    const loader = new Loader<'customId', CustomId, Button>(this.client, this.directory, 'customId', {\n      asyncRead: this.asyncRead,\n      manager: this,\n      instance: Button,\n    });\n    this.buttons = await loader.load();\n    new ShewenyInformation(this.client, `- Buttons loaded : ${this.buttons.size}`);\n    return this.buttons;\n  }\n\n  /**\n   * Unload all buttons\n   * @returns {void}\n   */\n  public unloadAll(): void {\n    this.buttons = new Collection();\n    this.client.collections.buttons.clear();\n  }\n}\n"]}