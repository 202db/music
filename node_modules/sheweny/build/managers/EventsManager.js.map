{"version":3,"file":"EventsManager.js","sourceRoot":"","sources":["../../src/managers/EventsManager.ts"],"names":[],"mappings":";;;AAAA,6CAA2C;AAC3C,kDAA4C;AAC5C,kDAAyD;AACzD,yCAAyC;AACzC,qDAA+C;AAC/C,2CAAwC;AAIxC;;GAEG;AACH,MAAa,aAAc,SAAQ,sBAAW;IAa5C;;;;OAIG;IACH,YAAY,MAAqB,EAAE,OAA6B;QAC9D,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAlBzB;;;WAGG;QACH;;;;;WAA4C;QAE5C;;;WAGG;QACH;;;;;WAA4C;QAU1C,IAAI,CAAC,OAAO,GAAG;YACb,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,OAAO;YACjC,IAAI,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI;SAC5B,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,OAAO;QAClB,MAAM,MAAM,GAAG,IAAI,kBAAM,CAAwB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE;YACpF,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,gBAAK;YACf,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,6BAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,qBAAqB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QAC7E,WAAW;QACX,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,WAAW,CAAC,MAAmC;QAC1D,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAEhD,KAAK,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,MAAM,EAAE;YACjC,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;gBACvB,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;oBACtB,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,YAAY,0BAAY,CAAC;wBAAE,MAAM,IAAI,SAAS,CAAC,SAAS,IAAI,iCAAiC,CAAC,CAAC;oBAChH,IAAI,GAAG,CAAC,IAAI;wBAAE,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,IAAe,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;;wBAC9E,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,IAAe,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;iBACzE;aACF;SACF;IACH,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,IAAI,CAAC,MAAM,GAAG,IAAI,uBAAU,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACzC,CAAC;CACF;AAvED,sCAuEC","sourcesContent":["import { EventEmitter } from 'node:events';\nimport { Loader } from '../utils/Loader.js';\nimport { ShewenyInformation } from '../helpers/index.js';\nimport { BaseManager } from './index.js';\nimport { Event } from '../structures/index.js';\nimport { Collection } from 'discord.js';\nimport type { ShewenyClient } from '../client/Client.js';\nimport type { EventsManagerOptions, EventsManagerDefaultOptions } from '../typescript/index.js';\n\n/**\n * Manager for Events\n */\nexport class EventsManager extends BaseManager {\n  /**\n   * Default data for the events\n   * @type {EventsManagerDefaultOptions}\n   */\n  public default: EventsManagerDefaultOptions;\n\n  /**\n   * Collection of the events\n   * @type {Collection<string, Event[]> | undefined}\n   */\n  public events?: Collection<string, Event[]>;\n\n  /**\n   * Constructor to manage events\n   * @param {ShewenyClient} [client] Client framework\n   * @param {EventsManagerOptions} [options] The options of the event manager\n   */\n  constructor(client: ShewenyClient, options: EventsManagerOptions) {\n    super(client, options);\n\n    this.default = {\n      emitter: options.default?.emitter,\n      once: options.default?.once,\n    };\n  }\n\n  /**\n   * Load all events in collection\n   * @returns {Promise<Collection<string, Event[]> | undefined>} The events to load\n   */\n  public async loadAll(): Promise<Collection<string, Event[]> | undefined> {\n    const loader = new Loader<'name', string, Event>(this.client, this.directory, 'name', {\n      manager: this,\n      instance: Event,\n      asyncRead: this.asyncRead,\n    });\n    this.events = await loader.load();\n    new ShewenyInformation(this.client, `- Events loaded : ${this.events.size}`);\n    // Register\n    await this.registerAll(this.events);\n    return this.events;\n  }\n\n  /**\n   * Emit all events in collection\n   * @param {Collection<string, Event[]> | undefined} [events] Events collection that will be emit\n   * @returns {Promise<void>}\n   */\n  public async registerAll(events: Collection<string, Event[]>): Promise<void> {\n    if (!events) throw new Error('No events found');\n\n    for (const [name, evts] of events) {\n      if (evts && evts.length) {\n        for (const evt of evts) {\n          if (!(evt.emitter instanceof EventEmitter)) throw new TypeError(`Event ${name} does not have a valid emitter.`);\n          if (evt.once) evt.emitter.once(name, (...args: unknown[]) => evt.execute(...args));\n          else evt.emitter.on(name, (...args: unknown[]) => evt.execute(...args));\n        }\n      }\n    }\n  }\n\n  /**\n   * Unload all events\n   * @returns {void}\n   */\n  public unloadAll(): void {\n    this.events = new Collection();\n    this.client.collections.events.clear();\n  }\n}\n"]}