{"version":3,"file":"CommandsManager.js","sourceRoot":"","sources":["../../src/managers/CommandsManager.ts"],"names":[],"mappings":";;;AAAA,2CAQoB;AACpB,kDAA4C;AAC5C,kDAAyD;AACzD,yCAAyC;AACzC,4DAAqG;AACrG,qDAAiD;AAQjD;;;GAGG;AACH,MAAa,eAAgB,SAAQ,sBAAW;IA2C9C;;;;OAIG;IACH,YAAY,MAAqB,EAAE,OAA+B;QAChE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAhDzB;;;WAGG;QACH;;;;;WAAwC;QAExC;;;WAGG;QACH;;;;;WAAgD;QAEhD;;;WAGG;QACH;;;;;WAAgD;QAEhD;;;WAGG;QACH;;;;;WAA8C;QAE9C;;;WAGG;QACH;;;;;WAAyC;QAEzC;;;WAGG;QACH;;;;;WAAqC;QAErC;;;WAGG;QACH;;;;;WAAyD;QAUvD,IAAI,CAAC,sBAAsB,GAAG,OAAO,EAAE,sBAAsB,IAAI,KAAK,CAAC;QACvE,IAAI,CAAC,+BAA+B,GAAG,OAAO,EAAE,+BAA+B,IAAI,KAAK,CAAC;QACzF,IAAI,CAAC,OAAO,GAAG;YACb,SAAS,EAAE,OAAO,CAAC,OAAO,EAAE,SAAS;YACrC,0BAA0B,EAAE,OAAO,CAAC,OAAO,EAAE,0BAA0B;YACvE,QAAQ,EAAE,OAAO,CAAC,OAAO,EAAE,QAAQ;YACnC,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,OAAO;YACjC,iBAAiB,EAAE,OAAO,CAAC,OAAO,EAAE,iBAAiB;YACrD,QAAQ,EAAE,OAAO,CAAC,OAAO,EAAE,QAAQ;YACnC,QAAQ,EAAE,OAAO,CAAC,OAAO,EAAE,QAAQ;YACnC,IAAI,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI;YAC3B,KAAK,EAAE,OAAO,CAAC,OAAO,EAAE,KAAK;YAC7B,eAAe,EAAE,OAAO,CAAC,OAAO,EAAE,eAAe;SAClD,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,OAAO,EAAE,OAAO,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,OAAO,EAAE,MAAM,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,IAAI,wCAAyB,CAAC,GAAG,CAAC;IACpF,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,aAAa,CACxB,OAAgB,EAChB,OAAmB;QAEnB,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAEnD,MAAM,IAAI,GAAG,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAA2B,CAAC;QAC/E,IAAI,CAAC,IAAI;YAAE,OAAO,SAAS,CAAC;QAE5B,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5H,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,iBAAiB,CAC5B,OAAmB;QAMnB,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAClH,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,aAAa,CACxB,OAAqC,EACrC,OAAmB;QAEnB,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAEnD,OAAO,OAAO;YACZ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC;YAC5D,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACxD,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,WAAW,CACtB,UAAwC,EACxC,UAAmB,EACnB,OAAmB;QAEnB,IAAI,CAAC,UAAU;YAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC1D,IAAI,CAAC,UAAU;YAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAE1D,MAAM,IAAI,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAA2B,CAAC;QAClF,IAAI,CAAC,IAAI;YAAE,OAAO,SAAS,CAAC;QAE5B,OAAO,OAAO;YACZ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC;YACnE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAC/D,CAAC;IAED;;;;OAIG;IACI,yBAAyB,CAAC,OAAgB;QAC/C,IAAI,CAAC,OAAO;YAAE,OAAO,IAAI,CAAC;QAC1B,IAAI,OAAO,CAAC,IAAI,KAAK,2BAAY,CAAC,MAAM;YAAE,OAAO,IAAI,CAAC;QAEtD,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,OAAO;YAAE,OAAO,IAAI,CAAC;QAC1B,MAAM,IAAI,GAA2B;YACnC,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;YAC5C,WAAW,EAAE,EAAE;YACf,wBAAwB,EAAE,SAAS;YACnC,YAAY,EAAE,SAAS;SACxB,CAAC;QACF,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC/B,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,eAAe,CAAC;YACxD,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,OAAO,KAAK,8BAAe,CAAC,EAAE,IAAI,OAAO,CAAC,OAAO,KAAK,8BAAe,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;SACzH;QACD,IAAI,OAAO,CAAC,IAAI,KAAK,2BAAY,CAAC,QAAQ,EAAE;YAC1C,OAAO;gBACL,GAAG,IAAI;gBACP,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,wBAAwB,EAAE,OAAO,CAAC,wBAAwB;gBAC1D,OAAO,EAAE,OAAO,CAAC,OAAO;aACC,CAAC;SAC7B;QAED,IAAI,OAAO,CAAC,IAAI,KAAK,2BAAY,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,KAAK,2BAAY,CAAC,OAAO,EAAE;YACjF,OAAO;gBACL,GAAG,IAAI;aACkB,CAAC;SAC7B;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,4BAA4B,CAAC,QAAuC;QACzE,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YAAE,OAAO,IAAI,CAAC;QAC3D,MAAM,IAAI,GAA6B,EAAE,CAAC;QAC1C,KAAK,MAAM,CAAC,EAAE,UAAU,CAAC,IAAI,QAAQ,EAAE;YACrC,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM;gBAAE,SAAS;YAChD,KAAK,MAAM,OAAO,IAAI,UAAU,EAAE;gBAChC,MAAM,WAAW,GAAG,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;gBAC5D,IAAI,WAAW,IAAI,OAAO,CAAC,0BAA0B;oBAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAC/E;SACF;QACD,IAAI,IAAI,CAAC,MAAM;YAAE,OAAO,IAAI,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,OAAO;QAClB,MAAM,MAAM,GAAG,IAAI,kBAAM,CAA0B,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE;YACtF,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,kBAAO;YACjB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACpC,IAAI,6BAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,uBAAuB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;QAEjF,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,IAAI,CAAC,+BAA+B,EAAE;YAC/D,MAAM,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACrE;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,2BAA2B,CACtC,QAAuC,EACvC,OAAiC;QAEjC,IAAI,OAAO,IAAI,OAAO,YAAY,KAAK;YAAE,OAAO,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,2BAA2B,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;QACpH,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACrD,MAAM,IAAI,GAAG,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;QACzD,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;YAAE,OAAO;QAC5C,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;QAC/B,IAAI,IAAI,CAAC,gBAAgB,KAAK,wCAAyB,CAAC,GAAG,EAAE;YAC3D,IAAI,OAAO;gBAAE,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;gBACnE,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACxD;QACD,IAAI,IAAI,CAAC,gBAAgB,KAAK,wCAAyB,CAAC,MAAM,EAAE;YAC9D,KAAK,MAAM,OAAO,IAAI,IAAI,EAAE;gBAC1B,IAAI,OAAO;oBAAE,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;;oBACzE,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAC9D;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACK,iBAAiB,CACvB,IAA6F;QAE7F,IAAI,IAAI,KAAK,2BAAY,CAAC,QAAQ;YAAE,OAAO,mCAAsB,CAAC,SAAS,CAAC;QAC5E,IAAI,IAAI,KAAK,2BAAY,CAAC,MAAM;YAAE,OAAO,mCAAsB,CAAC,OAAO,CAAC;QACxE,IAAI,IAAI,KAAK,2BAAY,CAAC,OAAO;YAAE,OAAO,mCAAsB,CAAC,IAAI,CAAC;QACtE,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,IAAI,CAAC,QAAQ,GAAG,IAAI,uBAAU,EAAE,CAAC;QACjC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC3C,CAAC;CACF;AAhRD,0CAgRC","sourcesContent":["import {\n  Collection,\n  type ApplicationCommand,\n  type ApplicationCommandData,\n  type ApplicationCommandResolvable,\n  type GuildResolvable,\n  ApplicationCommandType,\n  type Snowflake,\n} from 'discord.js';\nimport { Loader } from '../utils/Loader.js';\nimport { ShewenyInformation } from '../helpers/index.js';\nimport { BaseManager } from './index.js';\nimport { COMMANDS_MANAGER_STRATEGY, COMMAND_CHANNEL, COMMAND_TYPE } from '../constants/constants.js';\nimport { Command } from '../structures/index.js';\nimport type { ShewenyClient } from '../client/Client.js';\nimport type {\n  CommandsManagerOptions,\n  CommandsManagerDefaultOptions,\n  MessageCommandPrefix,\n  CommandManagerRegisterStrategy,\n} from '../typescript/index.js';\n/**\n * Manager for Commands\n * @extends {EventEmitter}\n */\nexport class CommandsManager extends BaseManager {\n  /**\n   * If the applications commands are disabled according to the `userPermissions` array\n   * @type {boolean | undefined}\n   */\n  public applicationPermissions?: boolean;\n\n  /**\n   * Register application commands\n   * @type {boolean}\n   */\n  public autoRegisterApplicationCommands: boolean;\n\n  /**\n   * Collection of the commands\n   * @type {Collection<string, Command[]> | undefined}\n   */\n  public commands?: Collection<string, Command[]>;\n\n  /**\n   * Default data for the commands\n   * @type {CommandsManagerDefaultOptions}\n   */\n  public default: CommandsManagerDefaultOptions;\n\n  /**\n   * ID of the guild where are set Applications Commands\n   * @type {Snowflake | Snowflake[] | undefined}\n   */\n  public guildId?: Snowflake | Snowflake[];\n\n  /**\n   * Prefix for the Message Commands\n   * @type {string | undefined}\n   */\n  public prefix?: MessageCommandPrefix;\n\n  /**\n   * The strategy for register application commands\n   * @type {CommandManagerRegisterStrategy}\n   */\n  public registerStrategy?: CommandManagerRegisterStrategy;\n\n  /**\n   * Constructor of commands manager\n   * @param {ShewenyClient} client Client framework\n   * @param {CommandsManagerOptions} [options] Options of the commands manager\n   */\n  constructor(client: ShewenyClient, options: CommandsManagerOptions) {\n    super(client, options);\n\n    this.applicationPermissions = options?.applicationPermissions || false;\n    this.autoRegisterApplicationCommands = options?.autoRegisterApplicationCommands || false;\n    this.default = {\n      adminOnly: options.default?.adminOnly,\n      registerApplicationCommand: options.default?.registerApplicationCommand,\n      category: options.default?.category,\n      channel: options.default?.channel,\n      clientPermissions: options.default?.clientPermissions,\n      cooldown: options.default?.cooldown,\n      examples: options.default?.examples,\n      type: options.default?.type,\n      usage: options.default?.usage,\n      userPermissions: options.default?.userPermissions,\n    };\n    this.guildId = options?.guildId;\n    this.prefix = options?.prefix;\n    this.registerStrategy = options.registerStrategy || COMMANDS_MANAGER_STRATEGY.set;\n  }\n\n  /**\n   * Create a command in the client's application commands\n   * @param {Command} [command] Command to create\n   * @param {Snowflake | undefined} [guildId] Guild ID where the order will be created\n   * @returns {Promise<ApplicationCommand<Record<string, unknown>> | ApplicationCommand<{ guild: GuildResolvable }> | undefined>}\n   */\n  public async createCommand(\n    command: Command,\n    guildId?: Snowflake,\n  ): Promise<ApplicationCommand<Record<string, unknown>> | ApplicationCommand<{ guild: GuildResolvable }> | undefined> {\n    if (!command) throw new Error('Command not found');\n\n    const data = this.getApplicationCommandData(command) as ApplicationCommandData;\n    if (!data) return undefined;\n\n    return guildId ? this.client.application?.commands.create(data, guildId) : this.client.application?.commands.create(data);\n  }\n\n  /**\n   * Delete all commands from the client's application commands\n   * @param {Snowflake | undefined} [guildId] Guild ID where all commands will be deleted\n   * @returns {Promise<Collection<string, ApplicationCommand<{}>> | Collection<string, ApplicationCommand<{ guild: GuildResolvable }>> | undefined>}\n   */\n  public async deleteAllCommands(\n    guildId?: Snowflake,\n  ): Promise<\n    | Collection<string, ApplicationCommand<Record<string, unknown>>>\n    | Collection<string, ApplicationCommand<{ guild: GuildResolvable }>>\n    | undefined\n  > {\n    return guildId ? this.client.application?.commands.set([], guildId) : this.client.application?.commands.set([]);\n  }\n\n  /**\n   * Removes an command from the client's application commands\n   * @param {ApplicationCommandResolvable} command Command deleted\n   * @param {Snowflake | undefined} [guildId] Guild ID where the command will be deleted\n   * @returns {Promise<ApplicationCommand<{ guild: GuildResolvable }> | null | undefined>}\n   */\n  public async deleteCommand(\n    command: ApplicationCommandResolvable,\n    guildId?: Snowflake,\n  ): Promise<ApplicationCommand<{ guild: GuildResolvable }> | null | undefined> {\n    if (!command) throw new Error('Command not found');\n\n    return guildId\n      ? this.client.application?.commands.delete(command, guildId)\n      : this.client.application?.commands.delete(command);\n  }\n\n  /**\n   * Edit an command with a new command in the client's application commands\n   * @param {ApplicationCommandResolvable} oldCommand Command edited\n   * @param {Command} newCommand The new command that will take the place of the old one\n   * @param {Snowflake | undefined} [guildId] Guild ID where the order will be edited\n   * @returns {Promise<ApplicationCommand<{}> | ApplicationCommand<{ guild: GuildResolvable }> | undefined>}\n   */\n  public async editCommand(\n    oldCommand: ApplicationCommandResolvable,\n    newCommand: Command,\n    guildId?: Snowflake,\n  ): Promise<ApplicationCommand<Record<string, unknown>> | ApplicationCommand<{ guild: GuildResolvable }> | undefined> {\n    if (!oldCommand) throw new Error('Old Command not found');\n    if (!newCommand) throw new Error('New Command not found');\n\n    const data = this.getApplicationCommandData(newCommand) as ApplicationCommandData;\n    if (!data) return undefined;\n\n    return guildId\n      ? this.client.application?.commands.edit(oldCommand, data, guildId)\n      : this.client.application?.commands.edit(oldCommand, data);\n  }\n\n  /**\n   * Get data of application command\n   * @param {Command} [command] The command to obtain data\n   * @returns {ApplicationCommandData | null}\n   */\n  public getApplicationCommandData(command: Command): ApplicationCommandData | null {\n    if (!command) return null;\n    if (command.type === COMMAND_TYPE.cmdMsg) return null;\n\n    const newType = this.renameCommandType(command.type);\n    if (!newType) return null;\n    const base: ApplicationCommandData = {\n      type: newType,\n      name: command.name,\n      nameLocalizations: command.nameLocalizations,\n      description: '',\n      defaultMemberPermissions: undefined,\n      dmPermission: undefined,\n    };\n    if (this.applicationPermissions) {\n      base.defaultMemberPermissions = command.userPermissions;\n      base.dmPermission = command.channel === COMMAND_CHANNEL.dm || command.channel === COMMAND_CHANNEL.global ? true : false;\n    }\n    if (command.type === COMMAND_TYPE.cmdSlash) {\n      return {\n        ...base,\n        description: command.description,\n        descriptionLocalizations: command.descriptionLocalizations,\n        options: command.options,\n      } as ApplicationCommandData;\n    }\n\n    if (command.type === COMMAND_TYPE.ctxMsg || command.type === COMMAND_TYPE.ctxUser) {\n      return {\n        ...base,\n      } as ApplicationCommandData;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get an array of ApplicationCommandData from a collection of commands;\n   * @param {Collection<string, Command>} [commands] The commandsToRegister\n   * @returns {ApplicationCommandData[] | null}\n   */\n  public getAllApplicationCommandData(commands: Collection<string, Command[]>): ApplicationCommandData[] | null {\n    if (!commands || (commands && !commands.size)) return null;\n    const data: ApplicationCommandData[] = [];\n    for (const [, structures] of commands) {\n      if (!structures || !structures.length) continue;\n      for (const command of structures) {\n        const commandData = this.getApplicationCommandData(command);\n        if (commandData && command.registerApplicationCommand) data.push(commandData);\n      }\n    }\n    if (data.length) return data;\n    return null;\n  }\n\n  /**\n   * Load all commands in collection\n   * @returns {Promise<Collection<string, Command[] | undefined>}\n   */\n  public async loadAll(): Promise<Collection<string, Command[]> | undefined> {\n    const loader = new Loader<'name', string, Command>(this.client, this.directory, 'name', {\n      manager: this,\n      instance: Command,\n      asyncRead: this.asyncRead,\n    });\n    this.commands = await loader.load();\n    new ShewenyInformation(this.client, `- Commands loaded : ${this.commands.size}`);\n\n    if (this.commands?.size && this.autoRegisterApplicationCommands) {\n      await this.registerApplicationCommands(this.commands, this.guildId);\n    }\n\n    return this.commands;\n  }\n\n  /**\n   * Set all application commands from the collection of commands in the client application\n   * @param {Collection<string, Command> | undefined} [commands] Collection of the commands\n   * @returns {Promise<Collection<Snowflake, ApplicationCommand<{}>> | Collection<Snowflake, ApplicationCommand<{ guild: GuildResolvable }>> | undefined>}\n   */\n  public async registerApplicationCommands(\n    commands: Collection<string, Command[]>,\n    guildId?: Snowflake | Snowflake[],\n  ): Promise<boolean | undefined> {\n    if (guildId && guildId instanceof Array) return guildId.every(id => this.registerApplicationCommands(commands, id));\n    if (!commands) throw new Error('Commands not found');\n    const data = this.getAllApplicationCommandData(commands);\n    if (!data || (data && !data.length)) return;\n    await this.client.awaitReady();\n    if (this.registerStrategy === COMMANDS_MANAGER_STRATEGY.set) {\n      if (guildId) await this.client.application?.commands.set(data, guildId);\n      else await this.client.application?.commands.set(data);\n    }\n    if (this.registerStrategy === COMMANDS_MANAGER_STRATEGY.create) {\n      for (const command of data) {\n        if (guildId) await this.client.application?.commands.create(command, guildId);\n        else await this.client.application?.commands.create(command);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Rename command type to the type of Application command\n   * @param {\"SLASH_COMMAND\" | \"CONTEXT_MENU_USER\" | \"CONTEXT_MENU_MESSAGE\"} type Type of command\n   * @returns {ApplicationCommandType | undefined}\n   */\n  private renameCommandType(\n    type: typeof COMMAND_TYPE.cmdSlash | typeof COMMAND_TYPE.ctxUser | typeof COMMAND_TYPE.ctxMsg,\n  ): ApplicationCommandType | undefined {\n    if (type === COMMAND_TYPE.cmdSlash) return ApplicationCommandType.ChatInput;\n    if (type === COMMAND_TYPE.ctxMsg) return ApplicationCommandType.Message;\n    if (type === COMMAND_TYPE.ctxUser) return ApplicationCommandType.User;\n    return undefined;\n  }\n\n  /**\n   * Unload all commands\n   * @returns {void}\n   */\n  public unloadAll(): void {\n    this.commands = new Collection();\n    this.client.collections.commands.clear();\n  }\n}\n"]}