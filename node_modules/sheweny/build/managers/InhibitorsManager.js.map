{"version":3,"file":"InhibitorsManager.js","sourceRoot":"","sources":["../../src/managers/InhibitorsManager.ts"],"names":[],"mappings":";;;AAAA,kDAA4C;AAC5C,kDAAyD;AACzD,yCAAyC;AACzC,qDAAmD;AACnD,2CAAwC;AAIxC;;GAEG;AACH,MAAa,iBAAkB,SAAQ,sBAAW;IAahD;;;;OAIG;IACH,YAAY,MAAqB,EAAE,OAAiC;QAClE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAlBzB;;;WAGG;QACH;;;;;WAAgD;QAEhD;;;WAGG;QACH;;;;;WAAoD;QASlD,IAAI,CAAC,OAAO,GAAG;YACb,QAAQ,EAAE,OAAO,CAAC,OAAO,EAAE,QAAQ;YACnC,IAAI,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI;SAC5B,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,OAAO;QAClB,MAAM,MAAM,GAAG,IAAI,kBAAM,CAA4B,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE;YACxF,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,oBAAS;YACnB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACtC,IAAI,6BAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,yBAAyB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QACrF,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,IAAI,CAAC,UAAU,GAAG,IAAI,uBAAU,EAAE,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC7C,CAAC;CACF;AAjDD,8CAiDC","sourcesContent":["import { Loader } from '../utils/Loader.js';\nimport { ShewenyInformation } from '../helpers/index.js';\nimport { BaseManager } from './index.js';\nimport { Inhibitor } from '../structures/index.js';\nimport { Collection } from 'discord.js';\nimport type { ShewenyClient } from '../client/Client.js';\nimport type { InhibitorsManagerOptions, InhibitorsManagerDefaultOptions } from '../typescript/index.js';\n\n/**\n * Manager for Inhibitors\n */\nexport class InhibitorsManager extends BaseManager {\n  /**\n   * Default data for the inhibitors\n   * @type {InhibitorsManagerDefaultOptions}\n   */\n  public default: InhibitorsManagerDefaultOptions;\n\n  /**\n   * Collection of the inhibitors\n   * @type {Collection<string, Inhibitor[]> | undefined}\n   */\n  public inhibitors?: Collection<string, Inhibitor[]>;\n\n  /**\n   * Constructor to manage inhibitors\n   * @param {ShewenyClient} [client] Client framework\n   * @param {boolean} [options] The options of the manager\n   */\n  constructor(client: ShewenyClient, options: InhibitorsManagerOptions) {\n    super(client, options);\n    this.default = {\n      priority: options.default?.priority,\n      type: options.default?.type,\n    };\n  }\n\n  /**\n   * Load all inhibitors in collection\n   * @returns {Promise<Collection<string, Inhibitor[]> | undefined>}\n   */\n  public async loadAll(): Promise<Collection<string, Inhibitor[]> | undefined> {\n    const loader = new Loader<'name', string, Inhibitor>(this.client, this.directory, 'name', {\n      manager: this,\n      instance: Inhibitor,\n      asyncRead: this.asyncRead,\n    });\n    this.inhibitors = await loader.load();\n    new ShewenyInformation(this.client, `- Inhibitors loaded : ${this.inhibitors.size}`);\n    return this.inhibitors;\n  }\n\n  /**\n   * Unload all inhibitors\n   * @returns {void}\n   */\n  public unloadAll(): void {\n    this.inhibitors = new Collection();\n    this.client.collections.inhibitors.clear();\n  }\n}\n"]}