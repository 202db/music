{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/typescript/interfaces.ts"],"names":[],"mappings":";;AAmPA,wBAAwB","sourcesContent":["import type {\n  ApplicationCommandOptionData,\n  PermissionResolvable,\n  Collection,\n  ClientOptions,\n  Snowflake,\n  LocalizationMap,\n} from 'discord.js';\nimport type { EventEmitter } from 'node:events';\nimport type {\n  // Managers\n  ButtonsManager,\n  CommandsManager,\n  EventsManager,\n  InhibitorsManager,\n  ModalsManager,\n  SelectMenusManager,\n  // Structures\n  Button,\n  Command,\n  Event,\n  Inhibitor,\n  SelectMenu,\n  Modal,\n} from '../index.js';\nimport type {\n  CLIENT_MODE,\n  COMMAND_CHANNEL,\n  COMMAND_MESSAGE_ARGS_TYPE,\n  COMMAND_TYPE,\n  INHIBITOR_TYPE,\n} from '../constants/constants.js';\nimport type { CommandManagerRegisterStrategy, CustomId, InhibitorType, MessageCommandPrefix } from './types.js';\n\n/**\n * Interfaces of managers\n */\nexport interface BaseManagerOptions {\n  directory: string;\n  asyncRead?: boolean;\n}\nexport interface CommandsManagerOptions extends BaseManagerOptions {\n  guildId?: Snowflake | Snowflake[];\n  prefix?: MessageCommandPrefix;\n  applicationPermissions?: boolean;\n  autoRegisterApplicationCommands?: boolean;\n  default?: CommandsManagerDefaultOptions;\n  registerStrategy?: CommandManagerRegisterStrategy;\n}\nexport interface CommandsManagerDefaultOptions {\n  adminOnly?: boolean;\n  registerApplicationCommand?: boolean;\n  category?: string;\n  channel?: typeof COMMAND_CHANNEL.dm | typeof COMMAND_CHANNEL.global | typeof COMMAND_CHANNEL.guild;\n  clientPermissions?: PermissionResolvable[];\n  cooldown?: number;\n  description?: string;\n  descriptionLocalizations?: LocalizationMap;\n  examples?: string | string[];\n  type?: typeof COMMAND_TYPE.cmdSlash | typeof COMMAND_TYPE.cmdMsg | typeof COMMAND_TYPE.ctxMsg | typeof COMMAND_TYPE.ctxUser;\n  usage?: string | string[];\n  userPermissions?: PermissionResolvable[];\n}\nexport interface EventsManagerOptions extends BaseManagerOptions {\n  default?: EventsManagerDefaultOptions;\n}\nexport interface EventsManagerDefaultOptions {\n  emitter?: EventEmitter;\n  once?: boolean;\n}\n\nexport interface InhibitorsManagerOptions extends BaseManagerOptions {\n  default?: InhibitorsManagerDefaultOptions;\n}\nexport interface InhibitorsManagerDefaultOptions {\n  priority?: number;\n  type?:\n    | typeof INHIBITOR_TYPE.message[]\n    | typeof INHIBITOR_TYPE.appCommand[]\n    | typeof INHIBITOR_TYPE.button[]\n    | typeof INHIBITOR_TYPE.select[]\n    | typeof INHIBITOR_TYPE.all[];\n}\nexport interface ButtonsManagerOptions extends BaseManagerOptions {\n  default?: ButtonsManagerDefaultOptions;\n}\nexport interface ButtonsManagerDefaultOptions {\n  cooldown?: number;\n}\nexport interface SelectMenusManagerOptions extends BaseManagerOptions {\n  default?: SelectMenusManagerDefaultOptions;\n}\nexport interface SelectMenusManagerDefaultOptions {\n  cooldown?: number;\n}\nexport interface ModalsManagerOptions extends BaseManagerOptions {\n  default?: ModalsManagerDefaultOptions;\n}\nexport interface ModalsManagerDefaultOptions {\n  cooldown?: number;\n}\n// ---------------STRUCTURES-DATA--------------- \\\\\n\n// COMMAND STRUCTURE\ninterface BaseCommand {\n  name: string;\n  description?: string;\n  category?: string;\n  usage?: string | string[];\n  enabled?: boolean;\n  examples?: string | string[];\n  channel?: typeof COMMAND_CHANNEL.dm | typeof COMMAND_CHANNEL.guild | typeof COMMAND_CHANNEL.global;\n  cooldown?: number;\n  adminsOnly?: boolean;\n  registerApplicationCommand?: boolean;\n  userPermissions?: PermissionResolvable[];\n  clientPermissions?: PermissionResolvable[];\n}\ninterface BaseApplicationCommand extends BaseCommand {\n  nameLocalizations?: LocalizationMap;\n  descriptionLocalizations?: LocalizationMap;\n}\n// Data option for `SLASH_COMMAND` type\nexport interface SlashCommandData extends BaseApplicationCommand {\n  descriptionLocalizations?: LocalizationMap;\n  type?: typeof COMMAND_TYPE.cmdSlash;\n  options?: ApplicationCommandOptionData[];\n}\n\n// Data option for `CONTEXT_MENU_USER` type\nexport interface ContextMenuUserData extends BaseApplicationCommand {\n  type?: typeof COMMAND_TYPE.ctxUser;\n}\n\n// Data option for `CONTEXT_MENU_MESSAGE` type\nexport interface ContextMenuMessageData extends BaseApplicationCommand {\n  type?: typeof COMMAND_TYPE.ctxMsg;\n}\n\n//  Data option for `MESSAGE_COMMAND` type\nexport interface MessageData extends BaseCommand {\n  type?: typeof COMMAND_TYPE.cmdMsg;\n  args?: MessageCommandOptionData[];\n  aliases?: string[];\n}\n\n// Data for the arguments message\nexport interface MessageCommandOptionData {\n  name: string;\n  type:\n    | typeof COMMAND_MESSAGE_ARGS_TYPE.string\n    | typeof COMMAND_MESSAGE_ARGS_TYPE.number\n    | typeof COMMAND_MESSAGE_ARGS_TYPE.boolean\n    | typeof COMMAND_MESSAGE_ARGS_TYPE.rest\n    | typeof COMMAND_MESSAGE_ARGS_TYPE.guild\n    | typeof COMMAND_MESSAGE_ARGS_TYPE.channel\n    | typeof COMMAND_MESSAGE_ARGS_TYPE.member\n    | typeof COMMAND_MESSAGE_ARGS_TYPE.guild_emoji\n    | typeof COMMAND_MESSAGE_ARGS_TYPE.role\n    | typeof COMMAND_MESSAGE_ARGS_TYPE.user\n    | typeof COMMAND_MESSAGE_ARGS_TYPE.command;\n  default?: unknown;\n}\n\n// The arguments in execute functions\nexport interface CommandMessageArgsResolved {\n  [index: string]: unknown;\n}\n// EVENT STRUCTURE\nexport interface EventData {\n  description?: string;\n  emitter?: EventEmitter;\n  once?: boolean;\n}\n// BUTTON STRUCTURE\nexport interface ButtonData {\n  enabled?: boolean;\n  cooldown?: number;\n}\n// MODAL STRUCTURE\nexport interface ModalData {\n  enabled?: boolean;\n  cooldown?: number;\n}\n// SELECTMENU STRUCTURE\nexport interface SelectMenuData {\n  enabled?: boolean;\n  cooldown?: number;\n}\n// INHIBITOR STRUCTURE\nexport interface InhibitorData {\n  enabled?: boolean;\n  type?: InhibitorType[];\n  priority?: number;\n}\n\n// ---------------CLIENT--------------- \\\\\n\nexport interface ShewenyClientOptions extends ClientOptions {\n  admins?: Snowflake[];\n  disableCooldownsForAdmins?: boolean;\n  joinThreadsOnCreate?: boolean;\n  managers?: ManagersOptions;\n  mode?: typeof CLIENT_MODE.dev | typeof CLIENT_MODE.prod;\n}\n\nexport interface Cooldowns {\n  commands: Collection<string, Collection<string, number>>;\n  buttons: Collection<CustomId, Collection<string, number>>;\n  selectMenus: Collection<CustomId, Collection<string, number>>;\n  modals: Collection<CustomId, Collection<string, number>>;\n}\n\n// Managers\nexport interface Managers {\n  buttons?: ButtonsManager;\n  commands?: CommandsManager;\n  events?: EventsManager;\n  inhibitors?: InhibitorsManager;\n  modals?: ModalsManager;\n  selectMenus?: SelectMenusManager;\n}\n\n// Collections of managers\nexport interface ManagersCollections {\n  buttons: Collection<CustomId, Button[]>;\n  commands: Collection<string, Command[]>;\n  events: Collection<string, Event[]>;\n  inhibitors: Collection<string, Inhibitor[]>;\n  modals: Collection<CustomId, Modal[]>;\n  selectMenus: Collection<CustomId, SelectMenu[]>;\n}\n\n// Client options for managers\ninterface ManagersOptions {\n  commands?: CommandsManagerOptions;\n  events?: EventsManagerOptions;\n  buttons?: BaseManagerOptions;\n  selectMenus?: BaseManagerOptions;\n  modals?: BaseManagerOptions;\n  inhibitors?: InhibitorsManagerOptions;\n}\n\n// #endregion Interfaces\n"]}