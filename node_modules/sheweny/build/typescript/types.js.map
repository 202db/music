{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/typescript/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { SlashCommandData, ContextMenuMessageData, ContextMenuUserData, MessageData } from './interfaces';\nimport type { COMMANDS_MANAGER_STRATEGY, COMMAND_TYPE, INHIBITOR_TYPE } from '../constants/constants.js';\nimport type {\n  ButtonsManager,\n  CommandsManager,\n  EventsManager,\n  InhibitorsManager,\n  ModalsManager,\n  SelectMenusManager,\n} from '../managers/index.js';\nimport type { Button, Command, Event, Inhibitor, SelectMenu, Modal } from '../structures';\nimport type { Message } from 'discord.js';\nimport type { Awaitable } from './utilityTypes';\n\n/** **** UTIL ******/\nexport type CustomId = Array<string | RegExp>;\n\n// Managers\nexport type Manager = ButtonsManager | CommandsManager | EventsManager | InhibitorsManager | ModalsManager | SelectMenusManager;\nexport type CommandManagerRegisterStrategy = typeof COMMANDS_MANAGER_STRATEGY.set | typeof COMMANDS_MANAGER_STRATEGY.create;\n// Structures\nexport type Structure = Button | Command | Event | Inhibitor | Modal | SelectMenu;\n/**\n * Commands types\n */\n// Type of data option in constructor\nexport type CommandData = SlashCommandData | ContextMenuUserData | ContextMenuMessageData | MessageData;\nexport type MessageCommandPrefix = string | ((msg: Message) => Awaitable<string>);\n\n// Type of th command structure\nexport type CommandType =\n  | typeof COMMAND_TYPE.cmdSlash\n  | typeof COMMAND_TYPE.ctxMsg\n  | typeof COMMAND_TYPE.ctxUser\n  | typeof COMMAND_TYPE.cmdMsg;\n\n/**\n * Inhibitors types\n */\nexport type InhibitorType =\n  | typeof INHIBITOR_TYPE.message\n  | typeof INHIBITOR_TYPE.appCommand\n  | typeof INHIBITOR_TYPE.button\n  | typeof INHIBITOR_TYPE.select\n  | typeof INHIBITOR_TYPE.modal\n  | typeof INHIBITOR_TYPE.all;\n"]}