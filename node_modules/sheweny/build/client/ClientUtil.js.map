{"version":3,"file":"ClientUtil.js","sourceRoot":"","sources":["../../src/client/ClientUtil.ts"],"names":[],"mappings":";;;AAAA,8CAAkD;AAIlD;;GAEG;AACH,MAAa,UAAW,SAAQ,wBAAc;IAE5C,YAAY,MAAqB;QAC/B,KAAK,CAAC,MAAM,CAAC,CAAC;QAFhB;;;;;WAAsC;QAGpC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IACD,UAAU;IACH,UAAU;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC;IACD,WAAW;IACJ,WAAW;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ;aACpC,MAAM,EAAE;aACR,GAAG,CAAC,CAAC,CAAY,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAChC,IAAI,CAAC,CAAC,CAAC,CAAC;IACb,CAAC;IACD,SAAS;IACF,SAAS;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;IACD,aAAa;IACN,aAAa;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC;IACD,eAAe;IACR,cAAc;QACnB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9D,CAAC;IAED,aAAa;IAEN,cAAc,CAAC,OAAe;QACnC,IAAI,GAAG,GAAoC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACzF,IAAI,GAAG,EAAE;YACP,OAAO,GAAG,CAAC;SACZ;aAAM;YACL,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAa,EAAE,EAAE,CAC5D,EAAE,CAAC,IAAI,CACL,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,IAAI,SAAS,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CACpH,CACF,CAAC;SACH;QACD,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AA7CD,gCA6CC","sourcesContent":["import { DiscordResolve } from '@sheweny/resolve';\nimport type { Command } from '../structures/index';\nimport type { ShewenyClient } from './Client.js';\n\n/**\n * Utility methods and properties for the client.\n */\nexport class ClientUtil extends DiscordResolve {\n  public override client: ShewenyClient;\n  constructor(client: ShewenyClient) {\n    super(client);\n    this.client = client;\n  }\n  // BUTTONS\n  public getButtons() {\n    return this.client.collections.buttons.toJSON().flat(1);\n  }\n  // COMMANDS\n  public getCommands(): Command[] {\n    return this.client.collections.commands\n      .toJSON()\n      .map((c: Command[]) => c.flat(1))\n      .flat(1);\n  }\n  // EVENTS\n  public getEvents() {\n    return this.client.collections.events.toJSON().flat(1);\n  }\n  // INHIBITORS\n  public getInhibitors() {\n    return this.client.collections.inhibitors.toJSON().flat(1);\n  }\n  // SELECT MENUS\n  public getSelectMenus() {\n    return this.client.collections.selectMenus.toJSON().flat(1);\n  }\n\n  /* Resolve */\n\n  public resolveCommand(command: string) {\n    let cmd: Command | Command[] | undefined = this.client.collections.commands.get(command);\n    if (cmd) {\n      return cmd;\n    } else {\n      cmd = this.client.collections.commands.find((cd: Command[]) =>\n        cd.some(\n          c => c.name.startsWith(command) || (c.aliases != undefined && c.aliases.length != 0 && c.aliases.includes(command)),\n        ),\n      );\n    }\n    return cmd;\n  }\n}\n"]}