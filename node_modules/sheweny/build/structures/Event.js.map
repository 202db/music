{"version":3,"file":"Event.js","sourceRoot":"","sources":["../../src/structures/Event.ts"],"names":[],"mappings":";;;AAAA,yCAA2C;AAC3C,kDAAmD;AAKnD;;;GAGG;AACH,MAAsB,KAAM,SAAQ,wBAAa;IAyB/C;;;;;OAKG;IACH,YAAY,MAAqB,EAAE,IAAY,EAAE,OAAmB;QAClE,KAAK,CAAC,MAAM,CAAC,CAAC;QA/BhB;;;WAGG;QACH;;;;;WAA2B;QAE3B;;;WAGG;QACH;;;;;WAA6B;QAE7B;;;WAGG;QACH;;;;;WAAoB;QAEpB;;;WAGG;QACH;;;;;WAAqB;QAUnB,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,IAAI,EAAE,CAAC;QAE1D,IAAI,CAAC,WAAW,GAAG,OAAO,EAAE,WAAW,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC;QACxE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC;IAC3D,CAAC;IAUD;;;;;OAKG;IACI,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,uBAAY,CAAC,IAAI,CAAC,MAAM,EAAE,iBAAiB,EAAE,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5F,MAAM,aAAa,GAAG,CAAC,wDAAa,IAAI,CAAC,IAAI,GAAC,CAAC,CAAC,OAAO,CAAC;QACxD,MAAM,GAAG,GAAU,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClD,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,MAAM;QACjB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACI,UAAU;QACf,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QAC7B,OAAO,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AApFD,sBAoFC","sourcesContent":["import { BaseStructure } from './index.js';\nimport { ShewenyError } from '../helpers/index.js';\nimport type { EventEmitter } from 'events';\nimport type { ShewenyClient } from '../client/Client.js';\nimport type { EventData, Awaitable } from '../typescript/index.js';\n\n/**\n * Represents an Event structure\n * @extends {BaseStructure}\n */\nexport abstract class Event extends BaseStructure {\n  /**\n   * Description of a event\n   * @type {string}\n   */\n  public description: string;\n\n  /**\n   * Set the emitter of the event\n   * @type {EventEmitter}\n   */\n  public emitter: EventEmitter;\n\n  /**\n   * Name of a event\n   * @type {string}\n   */\n  public name: string;\n\n  /**\n   * If the listener is deleted after it is executed\n   * @type {boolean}\n   */\n  public once: boolean;\n\n  /**\n   * Constructor for build a Event\n   * @param {ShewenyClient} [client] Client framework\n   * @param {string} [name] Name of the event\n   * @param {EventData | undefined} [options] Custom id for one or more buttons\n   */\n  constructor(client: ShewenyClient, name: string, options?: EventData) {\n    super(client);\n    const defaultData = client.managers.events?.default || {};\n\n    this.description = options?.description || '';\n    this.emitter = (options?.emitter || defaultData.emitter) ?? this.client;\n    this.name = name;\n    this.once = (options?.once || defaultData.once) ?? false;\n  }\n\n  before?(...args: unknown[]): Awaitable<unknown>;\n\n  /**\n   * Execute the events\n   * @param {any} args\n   */\n  abstract execute(...args: unknown[]): Awaitable<unknown>;\n\n  /**\n   * Register an event\n   * @public\n   * @async\n   * @returns {Promise<Event | ShewenyError>} The loaded event\n   */\n  public async register(): Promise<Event | ShewenyError> {\n    if (!this.path) return new ShewenyError(this.client, 'PATH_NOT_DEFINE', 'Event', this.name);\n    const EventImported = (await import(this.path)).default;\n    const evt: Event = new EventImported(this.client);\n    return evt;\n  }\n\n  /**\n   * Reload an event\n   * @public\n   * @async\n   * @returns {Promise<Collection<string, Event> | ShewenyError>} The events collection\n   */\n  public async reload(): Promise<Event | ShewenyError> {\n    this.unregister();\n    return this.register();\n  }\n\n  /**\n   * Unregister an event\n   * @public\n   * @returns {boolean}\n   */\n  public unregister(): boolean {\n    this.client.collections.events?.delete(this.name);\n    if (!this.path) return false;\n    delete require.cache[require.resolve(this.path)];\n    return true;\n  }\n}\n"]}