{"version":3,"file":"Modal.js","sourceRoot":"","sources":["../../src/structures/Modal.ts"],"names":[],"mappings":";;;AAAA,yDAAmD;AACnD,kDAAmD;AAKnD;;;GAGG;AACH,MAAsB,KAAM,SAAQ,gCAAa;IAY/C;;;;;OAKG;IACH,YAAY,MAAqB,EAAE,QAAkB,EAAE,OAAmB;QACxE,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAlBlC;;;WAGG;QACH;;;;;WAAwB;QACxB;;;WAGG;QACH;;;;;WAA0B;QAUxB,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvF,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAgBD;;;OAGG;IACI,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,uBAAY,CAAC,IAAI,CAAC,MAAM,EAAE,iBAAiB,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3G,MAAM,aAAa,GAAG,CAAC,wDAAa,IAAI,CAAC,IAAI,GAAC,CAAC,CAAC,OAAO,CAAC;QACxD,MAAM,GAAG,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3C,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,MAAM;QACjB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAED;;;OAGG;IACI,UAAU;QACf,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtD,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QAC7B,OAAO,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AApED,sBAoEC","sourcesContent":["import { BaseStructure } from './BaseStructure.js';\nimport { ShewenyError } from '../helpers/index.js';\nimport type { ShewenyClient } from '../client/Client.js';\nimport type { ModalSubmitInteraction } from 'discord.js';\nimport type { Awaitable, ModalData, CustomId } from '../typescript/index.js';\n\n/**\n * Represents an Modal structure\n * @extends {BaseStructure}\n */\nexport abstract class Modal extends BaseStructure {\n  /**\n   * Cooldown of a button in seconds\n   * @type {number}\n   */\n  public cooldown: number;\n  /**\n   * Custom id for one or more modals\n   * @type {CustomId}\n   */\n  public customId: CustomId;\n\n  /**\n   * Constructor to build a Modal\n   * @param {ShewenyClient} [client] Client framework\n   * @param {CustomId} [customId] Custom id for one or more modals\n   * @param {ModalData | undefined} [options] The options of the modal\n   */\n  constructor(client: ShewenyClient, customId: CustomId, options?: ModalData) {\n    super(client, options?.enabled);\n    this.cooldown = (options?.cooldown || client.managers.buttons?.default?.cooldown) ?? 0;\n    this.customId = customId;\n  }\n\n  /**\n   * This function is executed before executing the `execute` function\n   * @param {ModalSubmitInteraction} interaction Modal interaction\n   * @returns {any | Promise<any>}\n   */\n  before?(interaction: ModalSubmitInteraction): Awaitable<unknown>;\n\n  /**\n   * Main function `execute` for the modals\n   * @param {ModalSubmitInteraction} interaction Modal interaction\n   * @returns {any | Promise<any>}\n   */\n  abstract execute(interaction: ModalSubmitInteraction): Awaitable<unknown>;\n\n  /**\n   * Register a modal in collections\n   * @returns {Promise<Modal | ShewenyError>}\n   */\n  public async register(): Promise<Modal | ShewenyError> {\n    if (!this.path) return new ShewenyError(this.client, 'PATH_NOT_DEFINE', 'Modal', this.customId.toString());\n    const ModalImported = (await import(this.path)).default;\n    const mod = new ModalImported(this.client);\n    return mod;\n  }\n\n  /**\n   * Reload a modal\n   * @returns {Promise<Modal> | ShewenyError>}\n   */\n  public async reload(): Promise<Modal | ShewenyError> {\n    this.unregister();\n    return this.register();\n  }\n\n  /**\n   * Unregister a modal from collections\n   * @returns {boolean}\n   */\n  public unregister(): boolean {\n    this.client.collections.modals?.delete(this.customId);\n    if (!this.path) return false;\n    delete require.cache[require.resolve(this.path)];\n    return true;\n  }\n}\n"]}