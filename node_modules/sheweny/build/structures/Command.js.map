{"version":3,"file":"Command.js","sourceRoot":"","sources":["../../src/structures/Command.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseStructure } from './index.js';\nimport { ShewenyError } from '../helpers/index.js';\nimport { COMMAND_CHANNEL, COMMAND_TYPE } from '../constants/constants.js';\nimport type { ShewenyClient } from '../client/Client.js';\nimport type {\n  // Interfaces\n  MessageCommandOptionData,\n  CommandMessageArgsResolved,\n  SlashCommandData,\n  MessageData,\n  // Types\n  CommandData,\n  ContextMenuMessageData,\n  ContextMenuUserData,\n  CommandType,\n  // utilityTypes\n  Awaitable,\n} from '../typescript/index.js';\nimport type {\n  ApplicationCommandOptionData,\n  CommandInteraction,\n  ContextMenuCommandInteraction,\n  Message,\n  AutocompleteInteraction,\n  PermissionResolvable,\n  LocalizationMap,\n} from 'discord.js';\n\n/**\n * Represents an Command structure\n * @extends {BaseStructure}\n */\nexport abstract class Command extends BaseStructure {\n  /**\n   * If a command is reserved for bot admins\n   * @type {boolean}\n   */\n  public adminsOnly: boolean;\n\n  /**\n   * Register Slash Command or not\n   * @type {boolean}\n   */\n  public registerApplicationCommand: boolean;\n\n  /**\n   * Aliases of the Message command\n   * @type {string[] | undefined}\n   */\n  public aliases?: string[];\n\n  /**\n   * Args of a Message command\n   * @type {MessageCommandOptionData | undefined}\n   */\n  public args?: MessageCommandOptionData[];\n\n  /**\n   * Category of a command\n   * @type {string}\n   */\n  public category: string;\n\n  /**\n   * Only channel where a command can be executed\n   * @type {\"GUILD\" | \"DM\" | undefined}\n   */\n  public channel?: typeof COMMAND_CHANNEL.dm | typeof COMMAND_CHANNEL.global | typeof COMMAND_CHANNEL.guild;\n\n  /**\n   * The permissions required for the client\n   * @type {PermissionResolvable[]}\n   */\n  public clientPermissions: PermissionResolvable[];\n\n  /**\n   * Cooldown of a command in seconds\n   * @type {number}\n   */\n  public cooldown: number;\n\n  /**\n   * Description of a command\n   * @type {string | undefined}\n   */\n  public description: string;\n\n  /**\n   * Localized descriptions of the command\n   * @type {LocalizationMap}\n   */\n  public descriptionLocalizations?: LocalizationMap;\n\n  /**\n   * Examples of a command\n   * @type {string}\n   */\n  public examples?: string | string[];\n\n  /**\n   * Name of a command\n   * @type {string}\n   */\n  public name: string;\n\n  /**\n   * Localized names of the command\n   * @type {LocalizationMap}\n   */\n  public nameLocalizations?: LocalizationMap;\n\n  /**\n   * Options of a Application command\n   * @type {ApplicationCommandOptionData[] | undefined}\n   */\n  public options?: ApplicationCommandOptionData[];\n\n  /**\n   * Type of a command\n   * @type {CommandType}\n   */\n  public type: CommandType;\n\n  /**\n   * Usage of a command\n   * @type {string | string[] | undefined}\n   */\n  public usage?: string | string[];\n\n  /**\n   * The permissions required to be executed by the user\n   * @type {PermissionResolvable[]}\n   */\n  public userPermissions: PermissionResolvable[];\n\n  /**\n   * Constructor for build a Command\n   * @param {ShewenyClient} client Client framework\n   * @param {CommandData} data Data for build a Command\n   */\n  constructor(client: ShewenyClient, data: CommandData) {\n    super(client, data.enabled);\n    const defaultData = client.managers.commands?.default || {};\n    const type = data.type || defaultData.type || COMMAND_TYPE.cmdMsg;\n\n    this.adminsOnly = (data.adminsOnly || defaultData.adminOnly) ?? false;\n    this.registerApplicationCommand = (data.registerApplicationCommand || defaultData.registerApplicationCommand) ?? true;\n    this.aliases = this.isType(type, COMMAND_TYPE.cmdMsg) ? (data as MessageData).aliases : [];\n    this.args = this.isType(type, COMMAND_TYPE.cmdMsg) ? (data as MessageData).args : undefined;\n    this.category = (data.category || defaultData.category) ?? '';\n    this.channel = data.channel || defaultData.channel;\n    this.clientPermissions = (data.clientPermissions || defaultData.clientPermissions) ?? [];\n    this.cooldown = (data.cooldown || defaultData.cooldown) ?? 0;\n    this.description = (data.description || defaultData.description) ?? '';\n    this.descriptionLocalizations = !this.isType(type, COMMAND_TYPE.cmdMsg)\n      ? (data as SlashCommandData | ContextMenuUserData | ContextMenuMessageData).descriptionLocalizations || undefined\n      : undefined;\n    this.examples = data.examples || defaultData.examples;\n    this.name = data.name;\n    this.nameLocalizations = !this.isType(type, COMMAND_TYPE.cmdMsg)\n      ? (data as SlashCommandData | ContextMenuUserData | ContextMenuMessageData).nameLocalizations || undefined\n      : undefined;\n    this.options = this.isType(type, COMMAND_TYPE.cmdSlash) ? (data as SlashCommandData).options : undefined;\n    this.type = type;\n    this.usage = data.usage || defaultData.usage;\n    this.userPermissions = (data.userPermissions || defaultData.userPermissions) ?? [];\n  }\n\n  /**\n   * This function is executed before executing the `execute` function\n   * @param {CommandInteraction | ContextMenuCommandInteraction | Message} interaction Interaction\n   * @returns {any | Promise<any>}\n   */\n  before?(interaction: CommandInteraction | ContextMenuCommandInteraction | Message): Awaitable<unknown>;\n\n  /**\n   * Main function `execute` for the commands\n   * @param {CommandInteraction | ContextMenuCommandInteraction | Message} interaction Interaction\n   * @param {CommandMessageArgsResolved[]} [args] Arguments of the Message command\n   * @returns {any | Promise<any>}\n   */\n  abstract execute(\n    interaction: CommandInteraction | ContextMenuCommandInteraction | Message,\n    args?: CommandMessageArgsResolved[],\n  ): Awaitable<unknown>;\n\n  /**\n   * Check the type of a command\n   * @param type - Type of a command\n   * @param types - Types allowed\n   * @returns {boolean}\n   */\n  private isType(type: string, ...types: string[]): boolean {\n    if (types.includes(type)) return true;\n    return false;\n  }\n\n  /**\n   *\n   * @param {AutocompleteInteraction} interaction\n   * @returns {any | Promise<any>}\n   */\n  onAutocomplete?(interaction: AutocompleteInteraction): Awaitable<unknown>;\n\n  /**\n   * Register a command in collections\n   * @returns {Collection<string, ApplicationCommand>} The Application Commands collection\n   */\n  public async register(): Promise<Command | ShewenyError> {\n    if (!this.path) return new ShewenyError(this.client, 'PATH_NOT_DEFINE', 'Command', this.name);\n    const CommandImported = (await import(this.path)).default;\n    const cmd: Command = new CommandImported(this.client);\n    return cmd;\n  }\n  /**\n   * Reload a command\n   * @returns {Promise<Collection<string, Command> | ShewenyError>} The Application Commands collection\n   */\n  public async reload(): Promise<Command | ShewenyError> {\n    this.unregister();\n    return this.register();\n  }\n  /**\n   * Unregister a command from collections\n   * @returns {boolean}\n   */\n  public unregister(): boolean {\n    this.client.collections.commands?.delete(this.name);\n    if (!this.path) return false;\n    delete require.cache[require.resolve(this.path)];\n    return true;\n  }\n}\n"]}