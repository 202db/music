{"version":3,"file":"Inhibitor.js","sourceRoot":"","sources":["../../src/structures/Inhibitor.ts"],"names":[],"mappings":";;;AAAA,yCAA2C;AAC3C,kDAAmD;AAKnD;;;GAGG;AACH,MAAsB,SAAU,SAAQ,wBAAa;IAmBnD;;;;;OAKG;IACH,YAAY,MAAqB,EAAE,IAAY,EAAE,OAAuB;QACtE,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAzBlC;;;WAGG;QACH;;;;;WAAoB;QAEpB;;;WAGG;QACH;;;;;WAAwB;QAExB;;;WAGG;QACH;;;;;WAA6B;QAU3B,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,OAAO,IAAI,EAAE,CAAC;QAE9D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE,QAAQ,IAAI,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACjE,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IACxD,CAAC;IAsBD;;;OAGG;IACI,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,uBAAY,CAAC,IAAI,CAAC,MAAM,EAAE,iBAAiB,EAAE,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAChG,MAAM,iBAAiB,GAAG,CAAC,wDAAa,IAAI,CAAC,IAAI,GAAC,CAAC,CAAC,OAAO,CAAC;QAC5D,MAAM,KAAK,GAAc,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5D,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,MAAM;QACjB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IACD;;;OAGG;IACI,UAAU;QACf,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtD,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QAC7B,OAAO,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAnFD,8BAmFC","sourcesContent":["import { BaseStructure } from './index.js';\nimport { ShewenyError } from '../helpers/index.js';\nimport type { ShewenyClient } from '../client/Client.js';\nimport type { Interaction, Message, ContextMenuCommandInteraction, CommandInteraction } from 'discord.js';\nimport type { Awaitable, InhibitorType, InhibitorData } from '../typescript/index.js';\n\n/**\n * Represents an Command structure\n * @extends {BaseStructure}\n */\nexport abstract class Inhibitor extends BaseStructure {\n  /**\n   * Name of a inhibitor\n   * @type {string}\n   */\n  public name: string;\n\n  /**\n   * Priority of a inhibitor\n   * @type {number}\n   */\n  public priority: number;\n\n  /**\n   * Type(s) of a inhibitor\n   * @type {InhibitorType[]}\n   */\n  public type: InhibitorType[];\n\n  /**\n   * Constructor for build a Inhibitor\n   * @param {ShewenyClient} [client] Client framework\n   * @param {string} [name] Name of the event\n   * @param {InhibitorData | undefined} [options] Options of the inhibitor\n   */\n  constructor(client: ShewenyClient, name: string, options?: InhibitorData) {\n    super(client, options?.enabled);\n    const defaultData = client.managers.inhibitors?.default || {};\n\n    this.name = name;\n    this.priority = (options?.priority || defaultData.priority) ?? 0;\n    this.type = (options?.type || defaultData.type) ?? [];\n  }\n\n  /**\n   * Main function `execute` for the inhibitors\n   * @param {any[]} args Button interaction\n   * @returns: Awaitable<unknown>}\n   */\n  abstract execute(\n    structure: BaseStructure,\n    ctx: Interaction | ContextMenuCommandInteraction | CommandInteraction | Message,\n  ): Awaitable<unknown>;\n\n  /**\n   * This function is executed when the main `execute` function has failed\n   * @param {any[]} args Arguments\n   * @returns: Awaitable<unknown>}\n   */\n  abstract onFailure(\n    structure: BaseStructure,\n    ctx: Interaction | ContextMenuCommandInteraction | CommandInteraction | Message,\n  ): Awaitable<unknown>;\n\n  /**\n   * Register an inhibitor in collections\n   * @returns {Promise<Inhibitor | ShewenyError>} The loaded inhibitor\n   */\n  public async register(): Promise<Inhibitor | ShewenyError> {\n    if (!this.path) return new ShewenyError(this.client, 'PATH_NOT_DEFINE', 'Inhibitor', this.name);\n    const InhibitorImported = (await import(this.path)).default;\n    const inhib: Inhibitor = new InhibitorImported(this.client);\n    return inhib;\n  }\n\n  /**\n   * Reload the inhibitor\n   * @returns {Promise<Inhibitor | ShewenyError>} The loaded inhibitor\n   */\n  public async reload(): Promise<Inhibitor | ShewenyError> {\n    this.unregister();\n    return this.register();\n  }\n  /**\n   * Unregister the inhibitor from cache\n   * @returns {boolean}\n   */\n  public unregister(): boolean {\n    this.client.collections.inhibitors?.delete(this.name);\n    if (!this.path) return false;\n    delete require.cache[require.resolve(this.path)];\n    return true;\n  }\n}\n"]}